#include<bits/stdc++.h>
using namespace std;
#define mx 100010
vector<int>G[mx];
int level[mx];
int parent[mx];
int sparse[mx][20];
int visited[mx];

void bfs(int u)
{
    parent[u] = -1;
    visited[u] = 1;
    queue<int>q;
    q.push(u);
    while(!q.empty())
    {
        u = q.front();
        q.pop();
        for(int i=0;i<G[u].size();i++)
        {
            int v = G[u][i];
            if(visited[v]==0)
            {
                visited[v] = 1;
                level[v] = level[u]+1;
                parent[v] = u;
                q.push(v);
            }
        }
    }
}
void lca_init(int n)
{
    memset(sparse,-1,sizeof(sparse));

    for(int i=0;i<n;i++)
    {
        sparse[i][0] = parent[i];
    }
    for(int j=1; 1<<j < n;j++)
    {
        for(int i=0;i<n;i++)
        {
            if(sparse[i][j-1]!=-1)
            {
                sparse[i][j] = sparse[sparse[i][j-1]][j-1];
            }
        }
    }
}
int lca_query(int n,int p,int q)
{
    if(level[p]<level[q])
    {
       int temp = p;
        p = q;
        q = temp;
    }
    int log = 1;
    while(1)
    {
        if(1<<log>level[p])break;
        log++;
    }
    for(int i=log;i>=0;i--)
    {
        if(level[p]-(1<<i)>=level[q])
        {
            p = sparse[p][i];
        }
    }
    if(p==q)return p;

    for(int i=log;i>=0;i--)
    {
        if(sparse[p][i]!=-1&&sparse[p][i]!=sparse[q][i])
        {
             p = sparse[p][i];
             q = sparse[q][i];
        }
    }
    return parent[p];
}

int main()
{
    int a,b, n = 17;
    for(int i=0;i<n-1;i++)
    {
        scanf("%d %d",&a,&b);
        G[a].push_back(b);
        G[b].push_back(a);
    }
	bfs(0);
	lca_init(n);

	while(scanf("%d %d",&a,&b)==2)
    {
        printf("%d\n",lca_query(n,a,b));
    }

/*
0 1
1 2
2 3
3 4
4 5
5 6
6 14
6 7
1 8
8 9
9 10
10 11
11 15
11 12
12 16
12 13
*/
return 0;
}
